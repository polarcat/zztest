#!/bin/sh

if [ -z "$1" ]; then
	echo "Usage: $(basename $0) <name>"
	exit 1
fi

target=$(grep "APP_PLATFORM" jni/Application.mk | cut -f2 -d'=')
if [ -z "$target" ]; then
	echo "jni/Application.mk does not specify target"
	exit 1
fi

cat > res/values/strings.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">$1</string>
</resources>
EOF

cat > AndroidManifest.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<!-- BEGIN_INCLUDE(manifest) -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="com.example.$1"
        android:versionCode="1"
        android:versionName="1.0">

    <!-- This is the platform API where application was introduced. -->
    <uses-sdk android:minSdkVersion="9" />

    <!-- This .apk has no Java code itself, so set hasCode to false. -->
    <application android:label="@string/app_name" android:hasCode="false">

        <!-- Our activity is the built-in application framework class.
             This will take care of integrating with our NDK code. -->
        <activity android:name="android.app.NativeActivity"
                android:label="@string/app_name"
                android:configChanges="orientation|keyboardHidden">
            <!-- Tell application the name of or .so -->
            <meta-data android:name="android.app.lib_name"
                    android:value="$1" />
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
<!-- END_INCLUDE(manifest) -->
EOF

android update project -p . -s -t $target -n "$1"
